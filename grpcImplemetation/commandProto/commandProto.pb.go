// Code generated by protoc-gen-go. DO NOT EDIT.
// source: commandProto.proto

/*
Package commandProto is a generated protocol buffer package.

It is generated from these files:
	commandProto.proto

It has these top-level messages:
	CmdRequest
	CmdReply
*/
package commandProto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the command name.
type CmdRequest struct {
	Version   string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Command   string `protobuf:"bytes,2,opt,name=command" json:"command,omitempty"`
	Request   string `protobuf:"bytes,3,opt,name=request" json:"request,omitempty"`
	RequestId string `protobuf:"bytes,4,opt,name=requestId" json:"requestId,omitempty"`
}

func (m *CmdRequest) Reset()                    { *m = CmdRequest{} }
func (m *CmdRequest) String() string            { return proto.CompactTextString(m) }
func (*CmdRequest) ProtoMessage()               {}
func (*CmdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CmdRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *CmdRequest) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *CmdRequest) GetRequest() string {
	if m != nil {
		return m.Request
	}
	return ""
}

func (m *CmdRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// The response message containing the result
type CmdReply struct {
	Message []byte `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *CmdReply) Reset()                    { *m = CmdReply{} }
func (m *CmdReply) String() string            { return proto.CompactTextString(m) }
func (*CmdReply) ProtoMessage()               {}
func (*CmdReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CmdReply) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto.RegisterType((*CmdRequest)(nil), "commandProto.CmdRequest")
	proto.RegisterType((*CmdReply)(nil), "commandProto.CmdReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CmdProto service

type CmdProtoClient interface {
	// Sends command reply
	GetReply(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*CmdReply, error)
}

type cmdProtoClient struct {
	cc *grpc.ClientConn
}

func NewCmdProtoClient(cc *grpc.ClientConn) CmdProtoClient {
	return &cmdProtoClient{cc}
}

func (c *cmdProtoClient) GetReply(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*CmdReply, error) {
	out := new(CmdReply)
	err := grpc.Invoke(ctx, "/commandProto.CmdProto/getReply", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CmdProto service

type CmdProtoServer interface {
	// Sends command reply
	GetReply(context.Context, *CmdRequest) (*CmdReply, error)
}

func RegisterCmdProtoServer(s *grpc.Server, srv CmdProtoServer) {
	s.RegisterService(&_CmdProto_serviceDesc, srv)
}

func _CmdProto_GetReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdProtoServer).GetReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commandProto.CmdProto/GetReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdProtoServer).GetReply(ctx, req.(*CmdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CmdProto_serviceDesc = grpc.ServiceDesc{
	ServiceName: "commandProto.CmdProto",
	HandlerType: (*CmdProtoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getReply",
			Handler:    _CmdProto_GetReply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commandProto.proto",
}

func init() { proto.RegisterFile("commandProto.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4a, 0xce, 0xcf, 0xcd,
	0x4d, 0xcc, 0x4b, 0x09, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x2b, 0x00, 0x91, 0x42, 0x3c, 0xc8, 0x62,
	0x4a, 0x15, 0x5c, 0x5c, 0xce, 0xb9, 0x29, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x12,
	0x5c, 0xec, 0x65, 0xa9, 0x45, 0xc5, 0x99, 0xf9, 0x79, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41,
	0x30, 0x2e, 0x48, 0x06, 0xaa, 0x4f, 0x82, 0x09, 0x22, 0x03, 0xe5, 0x82, 0x64, 0x8a, 0x20, 0xda,
	0x25, 0x98, 0x21, 0x32, 0x50, 0xae, 0x90, 0x0c, 0x17, 0x27, 0x94, 0xe9, 0x99, 0x22, 0xc1, 0x02,
	0x96, 0x43, 0x08, 0x28, 0xa9, 0x70, 0x71, 0x80, 0x6d, 0x2e, 0xc8, 0xa9, 0x04, 0x99, 0x91, 0x9b,
	0x5a, 0x5c, 0x9c, 0x98, 0x9e, 0x0a, 0xb6, 0x97, 0x27, 0x08, 0xc6, 0x35, 0xf2, 0x02, 0xab, 0x02,
	0xbb, 0x55, 0xc8, 0x8e, 0x8b, 0x23, 0x3d, 0xb5, 0x04, 0xaa, 0x43, 0x0f, 0xc5, 0x6b, 0x08, 0x3f,
	0x48, 0x89, 0x61, 0x91, 0x29, 0xc8, 0xa9, 0x54, 0x62, 0x48, 0x62, 0x03, 0x07, 0x80, 0x31, 0x20,
	0x00, 0x00, 0xff, 0xff, 0xfd, 0x78, 0xca, 0xba, 0x16, 0x01, 0x00, 0x00,
}
